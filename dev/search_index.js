var documenterSearchIndex = {"docs":
[{"location":"#LatLon.jl-Documentation","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"","category":"section"},{"location":"#Overview","page":"LatLon.jl Documentation","title":"Overview","text":"","category":"section"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"This module computes geo-distances between points and between sets. Also provided are retrieve functions for geo-data from NASA via KML files.","category":"page"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"The distance functions can be applied to the data from the geo-data from NASA files. However, it should be noted that the distance functions  assume a perfect sphere and do not, for instance, correct for the polar flattening of most planetary objects.","category":"page"},{"location":"#Exports","page":"LatLon.jl Documentation","title":"Exports","text":"","category":"section"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"Geo-Distance Functions:\ngeo_dist\nComputes the distance between two points on a sphere. The default sphere is the earth with the radius given in Kilometers.\ngeo_midpoint\nComputes the mid lat/lon between to lat/lon coordinates. \nlatlon_set_dist\nComputes the distance between two geo-sets on a sphere.\nGeo-Extraction Functions:\ncenter_latlon_from_NASA_xml_file\nRetrieve lat/lon data from a NASA XML \"center\" file.\nupath_latlon_from_NASA_xml_file\nRetrieve lat/lon data from a NASA XML \"upath\" file.","category":"page"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"CurrentModule = LatLon","category":"page"},{"location":"#Geo-Distance-Functions","page":"LatLon.jl Documentation","title":"Geo-Distance Functions","text":"","category":"section"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"geo_dist","category":"page"},{"location":"#LatLon.geo_dist","page":"LatLon.jl Documentation","title":"LatLon.geo_dist","text":"geo_dist(coord1::Vector{Float64}  , \n         coord2::Vector{Float64}  ,\n         radius=MC.radius::Float64 )\n\nComputes the distance between two coordinates on the earth represented as  two lon/lat vectors in signed degrees. That is, north latitude is  positive, south latitude is negative, while east longitude is positive  and west longitude is negative. The radius, R, defaults to the Earth's radius in Kilometers.\n\nDetails\n\nDot product, dp, of the geo-positions projected to the unit sphere gives the cosine of  the angle between the two points (on the \"great circle\"). Once the cosine is computed we can easily retrieve the angle (in Radians) and  then it is easy to find the distance between the two points.\nThe Cartesian points of the lon/lat one the unit sphere are: v1 = ( cos(θ1)cos(ϕ1), sin(θ1)cos(ϕ1), sin(ϕ1) )  v2 = ( cos(θ2)cos(ϕ2), sin(θ2)cos(ϕ2), sin(ϕ2) )\nThe dot product becomes: dp = v1 ⋅ v2 = cos(ϕ1)cos(ϕ2) ( cos(θ1)cos(θ2) + sin(θ1)sin(θ2) ) + sin(ϕ1)sin(ϕ2)\nSimplifying\ndp = cos(ϕ1)cos(ϕ2) cos(θ1 - θ2) + sin(ϕ1)sin(ϕ2)\ndp = ( cos(ϕ1)cos(ϕ2) + sin(ϕ1)sin(ϕ2) ) cos(θ1 - θ2) + (1 - cos(θ1 - θ2)) sin(ϕ1)sin(ϕ2)\ndp = cos(θ1 - θ2) cos(ϕ1 - ϕ2) + (1 - cos(θ1 - θ2)) sin(ϕ1)sin(ϕ2)\nSet A = cos(θ1 - θ2), B = cos(ϕ1 - ϕ2), then\ndp = AB + (1 - A)sin(ϕ1)sin(ϕ2)\nThe angle between vectors in Radians is then ψ = acos(dp)\nDistance between the two points on the sphere on the \"great circle\", Δ, is Δ = Rψ\n\nArguments\n\ncoord1::Vector{Float64} – A 2-element vector: [lon, lat] in signed degrees.\ncoord2::Vector{Float64} – A 2-element vector: [lon, lat] in signed degrees.\nR::Float64              – The radius of the sphere (Default is Earth's radius in Kilometers.)\n\nReturn\n\nThe distance in kilometers via a \"great\" circle path.\n\n\n\n\n\n","category":"function"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"geo_midpoint","category":"page"},{"location":"#LatLon.geo_midpoint","page":"LatLon.jl Documentation","title":"LatLon.geo_midpoint","text":"geo_midpoint(coord1::Vector{Float{64}, \n             coord2::Vector{Float64}  )\n\nComputes and returns the mid-point of two points on the sphere.\n\nArguments\n\ncoord1::Vector{Float64} - A 2-element vector: [lon, lat] in signed degrees.\ncoord2::Vector{Float64} - A 2-element vector: [lon, lat] in signed degrees.\n\nReturn\n\nThe 2-Vector representing the longitude and latitude.\n\n\n\n\n\n","category":"function"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"latlon_set_dist","category":"page"},{"location":"#LatLon.latlon_set_dist","page":"LatLon.jl Documentation","title":"LatLon.latlon_set_dist","text":"latlon_set_dist(coord1s::Vector{Float64}, \n                coord2s::Vector{Float64},\n                R=MC.radius::Float64     )\n\nComputes the set distance (in kilometers) between two sets as represented by their lat/lon coordinates. It does this the hard way by computing the distance of all pairs of points between the two sets. The radius, R, defaults to the Earth's radius in Kilometers.\n\nArguments\n\ncoord1s::Matrix{Float64} – The coordinates of the first set.\ncoord2s::Matrix{Float64} – The coordinates of the second set.\nR::Float64               – Radius of sphere (Default is Earth's radius in Kilometers.)\n\nReturn\n\nThe minimum distance between the sets along with the index of the points for each set. A Tuple: (distinkm, set1index, set2index)\n\n\n\n\n\n","category":"function"},{"location":"#Geo-Extraction-Functions","page":"LatLon.jl Documentation","title":"Geo-Extraction Functions","text":"","category":"section"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"center_latlon_from_NASA_xml_file","category":"page"},{"location":"#LatLon.center_latlon_from_NASA_xml_file","page":"LatLon.jl Documentation","title":"LatLon.center_latlon_from_NASA_xml_file","text":"center_latlon_from_NASA_xml_file(file::String)\n\nRetrieves the latitude and longitude from a \"center\" NASA kml file  as a matrix of Float64: 2xN. Here N is the number of points. Each column of this matrix (a 2-vector) is a lon/lat pair.\n\n\n\n\n\n","category":"function"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"upath_latlon_from_NASA_xml_file","category":"page"},{"location":"#LatLon.upath_latlon_from_NASA_xml_file","page":"LatLon.jl Documentation","title":"LatLon.upath_latlon_from_NASA_xml_file","text":"upath_latlon_from_NASA_xml_file(file::String)\n\nRetrieves the latitude and longitude of the annular ring representing the boundary of the \"total\" part of an eclipse from a \"upath\" NASA kml file as a matrix of Float64: 2xN. Here, N is the number of points. Each column of this matrix (a 2-vector) is a lon/lat pair.\n\n\n\n\n\n","category":"function"},{"location":"#Index","page":"LatLon.jl Documentation","title":"Index","text":"","category":"section"},{"location":"","page":"LatLon.jl Documentation","title":"LatLon.jl Documentation","text":"","category":"page"}]
}
